class Solution {
public:
    vector<int> memo;

    int maxEnvelopes(vector<vector<int>>& envelopes) {
        sort(envelopes.begin(),envelopes.end(),
        [](const vector<int>& lhs,const vector<int>& rhs)
        {
            if(lhs[0]<rhs[0]) return true;
            else if(lhs[0]==rhs[0] && lhs[1]>rhs[1]) return true;
            else return false;
        });

        memo.resize(envelopes.size());
        memo[0]=1;

        int res=0;
        for(int i=0;i<envelopes.size();i++)
        {
            res=max(res,dp(envelopes,i));
        }
        return res;
    }

    int dp(vector<vector<int>>& envelopes,int idx)
    {
        if(idx==0) return 1;
        if(memo[idx]!=0) return memo[idx];
        
        int maxCnt=1;
        for(int i=0;i<idx;i++)
        {
            if(envelopes[i][1]<envelopes[idx][1])
            {
                maxCnt=max(maxCnt,dp(envelopes,i)+1);
            }
        }
        memo[idx]=maxCnt;
        return maxCnt;
    }
};
