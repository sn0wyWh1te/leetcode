class Solution {
public:
    int maxSum=0;

    int maxSumBST(TreeNode* root) {
        traverse(root);
        return maxSum;
    }

    vector<int> traverse(TreeNode* root)
    {
        vector<int> ret;
        if(root==nullptr)
        {
            ret.push_back(1);
            ret.push_back(INT_MAX);
            ret.push_back(INT_MIN);
            ret.push_back(0);
            return ret;
        }

        vector<int> left=traverse(root->left);
        vector<int> right=traverse(root->right);

        if(left[0]==1 && right[0]==1 && root->val>left[2] && root->val<right[1])
        {
            ret.push_back(1);
            ret.push_back(min(left[1],root->val));
            ret.push_back(max(right[2],root->val));
            ret.push_back(left[3]+right[3]+root->val);
            maxSum=max(maxSum,ret[3]);
        }
        else
        {
            ret.push_back(0);
        }
        return ret;
    }
};
