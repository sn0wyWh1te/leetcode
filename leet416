class Solution {
public:
    vector<vector<int>> memo; 

    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto& elem:nums)
        {
            sum+=elem;
        }
        if(sum%2!=0)
            return false;
        sum=sum/2;

        memo.resize(nums.size()+1);
        for(auto& elem:memo)
        {
            elem.resize(sum+1,-5);
        }
        return dp(nums,nums.size(),sum);
    }

    //i表示前n个数字，j表示包容量
    int dp(vector<int>& nums,int i,int j)
    {
        if(i==0) return 0;
        if(j==0) return 1;
        if(memo[i][j]!=-5) return memo[i][j]==1?true:false;
        int res1=dp(nums,i-1,j);
        int res2=0;
        if(j-nums[i-1]>=0)
        {
            res2=dp(nums,i-1,j-nums[i-1]);
        }

        memo[i][j]=res1||res2?true:false;
        return memo[i][j];
    }
};
